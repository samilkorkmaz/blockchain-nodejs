const ChainUtil = require('../chain-util');
const { INITIAL_BALANCE } = require('../config');
const Transaction = require('./transaction');

class Wallet {
    constructor() {
        this.balance = INITIAL_BALANCE;
        this.keyPair = ChainUtil.genKeyPair();
        this.publicKey = this.keyPair.getPublic().encode('hex');
    }

    toString() {
        return `Wallet - 
        publicKey: ${this.publicKey.toString()}
        balance  : ${this.balance}`
    }

    sign(dataHash) {
        return this.keyPair.sign(dataHash);
    }

    createTransaction(recipient, amount, blockchain, transactionPool) {
        this.balance = this.calculateBalance(blockchain);
        if (amount > this.balance) {
            console.log(`Amount: ${amount} exceeds the current balance: ${this.balance}`);
            return;
        }
        let transaction = transactionPool.existingTransaction(this.publicKey);
        if (transaction) { //transaction exists in pool
            transaction.update(this, recipient, amount); // create more outputs
        }
        else {
            // creates a new transaction and updates the transaction pool
            transaction = new Transaction(this, recipient, amount);
            transactionPool.updateOrAddTransaction(transaction);
        }
        return transaction;
    }

    static blockchainWallet() {
        const blockchainWallet = new this();
        blockchainWallet.address = 'blockchain-wallet';
        return blockchainWallet;
    }

    calculateBalance(blockchain) {
        //TODO Another way: initial - (money sent by transacions created by this AND not addressed to this)
        //                          + (money received by this from transaction NOT created by this)
        console.log("calculateBalance()");
        let balance = this.balance;
        //Get all transactions in blockchain
        let transactions = [];
        blockchain.chain.forEach(block => block.validTransactions.forEach(transaction => {
            transactions.push(transaction);
        }));
        // Get all the transactions generated by this wallet, i.e. money SENT by this wallet's publicKey
        const walletInputTransactions = transactions.filter(transaction => transaction.input.address === this.publicKey);
        let startTime = 0;
        if (walletInputTransactions.length > 0) { //This wallet sent at least one money transaction
            const recentInputTransaction = walletInputTransactions.reduce((prev, current) => prev.input.timestamp > current.input.timestamp ? prev : current);
            // get the outputs of that transactions, its amount will be the money that we would get back
            balance = recentInputTransaction.outputs.find(output => output.address === this.publicKey).amount
            // save the timestamp of the latest transaction made by this wallet
            startTime = recentInputTransaction.input.timestamp
        }
        // Add all the money RECEIVED by this wallet after startTime, i.e. after the most recent balance calculation
        transactions.forEach(transaction => {
            if (transaction.input.timestamp > startTime) {
                transaction.outputs.find(output => {
                    if (output.address === this.publicKey) {
                        balance += output.amount;
                    }
                })
            }
        })
        return balance;
    }
}

module.exports = Wallet;